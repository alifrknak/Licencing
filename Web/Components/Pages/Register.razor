@page "/register"

@rendermode InteractiveServer

@using Application
@using System.ComponentModel.DataAnnotations
@using Domain.Dtos
@inject IUserService UserService
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-lg-6">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="registerModel" method="post" OnValidSubmit="HandleRegister" FormName="register">
                <DataAnnotationsValidator />
                <h2>Kayıt Ol</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="registerModel.Email" id="registerModel.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="Input.Email" class="form-label">Email</label>
                    <ValidationMessage For="() => registerModel.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="registerModel.Password" id="registerModel.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="Input.Password" class="form-label">Password</label>
                    <ValidationMessage For="() => registerModel.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Kayıt Ol</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="text-danger">@errorMessage</div>
}

@code {

    [SupplyParameterFromForm]
    public RegisterModel registerModel { get; set; } = new ();

    private string? errorMessage;

    private async Task HandleRegister()
    {
        var result = await UserService.RegisterAsync(new RegisterUserDto
        {
                Email = registerModel.Email,
                Password = registerModel.Password,
                FirstName = registerModel.Username,
                LastName = registerModel.Username // Assuming username is used for both first and last name
        });

        if (result)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            errorMessage = "Registration failed. Please try again.";
        }
    }

    public class RegisterModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
    }
}
